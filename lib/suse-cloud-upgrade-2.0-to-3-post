#!/bin/bash
# vim: sw=2 et
#
# Copyright 2014, SUSE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e

SUSE_LOGFILE="/var/log/crowbar/upgrade/`basename $0`.log"
source "`dirname $0`/common"


if test ! -f "${UPGRADE_DATA_DIR}/pre.run"; then
  die "upgrade-suse-cloud-2.0-to-3-pre needs to be run first."
fi

if test -f "${UPGRADE_DATA_DIR}/post.run"; then
  die "This script has already been run."
fi


ensure_data_dir
check_crowbar_key_or_fail
suse_cloud_version=$(get_installed_suse_cloud_version)

if test "x$suse_cloud_version" != "x3"; then
  die "Current installed version of SUSE Cloud is not 3: $out"
fi


### Reinstall the barclamps
echo_summary "Reinstalling barclamps..."

# order matters because of dependencies!
for barclamp in crowbar deployer dns ipmi logging network ntp provisioner \
         database rabbitmq keystone swift ceph glance cinder neutron nova \
         nova_dashboard openstack ; do
    /opt/dell/bin/barclamp_install.rb --rpm $barclamp
done

# optional barclamps if they're present
for barclamp in updater suse-manager-client nfs_client cisco-ucs hyperv heat ceilometer ; do
    if test -d $BARCLAMP_SRC/$i; then
        /opt/dell/bin/barclamp_install.rb --rpm $barclamp
    fi
done


### Drop remaining quantum bits
echo_summary "Removing obsolete data..."

knife cookbook delete -y quantum || true
knife role delete -y quantum-server || true
knife data bag delete -y barclamps quantum || true
knife data bag delete -y crowbar bc-template-quantum || true
for databag in $(knife data bag show crowbar | grep "^ *bc-quantum-"); do
  knife data bag delete -y crowbar "$databag"
done


### Drop roles that are gone
knife role delete -y ceph-mon-master || true
knife role delete -y ceph-store || true


### Crowbar can run again
echo_summary "Starting Crowbar..."

# Make sure that all files are up-to-date
chef-client
touch /opt/dell/crowbar_framework/.crowbar-installed-ok

rccrowbar restart


### Updating the repositories in provisioner barclamp
OLD_PROVISIONER_JSON="${UPGRADE_DATA_DIR}/provisioner/default-2.0.json"
NEW_PROVISIONER_JSON="${UPGRADE_DATA_DIR}/provisioner/default-3.json"
ETC_PROVISIONER_JSON="/etc/crowbar/provisioner.json"
if test -f "$ETC_PROVISIONER_JSON"; then
  if test -n "`json_read "$ETC_PROVISIONER_JSON" attributes.provisioner.suse.autoyast.repos`"; then
    echo_summary "Updating repositories in provisioner configuration..."

    cp -a "$OLD_PROVISIONER_JSON" "$NEW_PROVISIONER_JSON"

    # drop bits about Cloud 2.0 repos
    for repo in SUSE-Cloud-2.0-{Pool,Updates}; do
      attr_repo="${repo//./\\.}"
      $json_edit "$NEW_PROVISIONER_JSON" -a "attributes.provisioner.suse.autoyast.repos.${attr_repo}" --remove
    done

    # add/update bits about other repos
    for repo in SLE-Cloud SLE-Cloud-PTF SLES11-SP3-{Pool,Updates} SUSE-Cloud-3-{Pool,Updates}; do
      url="`get_repo_url_from "$repo" "$ETC_PROVISIONER_JSON"`"
      if test -n "$url"; then
        attr_repo="${repo//./\\.}"
        $json_edit "$NEW_PROVISIONER_JSON" -a "attributes.provisioner.suse.autoyast.repos.${attr_repo}.url" -v "$url"
      fi
    done
  fi

  crowbar provisioner proposal edit default --file "$NEW_PROVISIONER_JSON"
fi


### quantum -> neutron
# we only migrate a proposal named "default"
if test -f "${UPGRADE_DATA_DIR}/quantum/bc-quantum-default.json"; then
  echo_summary "Finishing the quantum -> neutron migration..."

  crowbar neutron proposal create default

  OLDJSONFILE="${UPGRADE_DATA_DIR}/quantum/bc-quantum-default.json"
  JSONFILE=$(mktemp --suffix=.json)
  crowbar neutron proposal show default > "$JSONFILE"
  $json_edit "$JSONFILE" -a attributes.neutron.use_ml2 --raw -v "false"

  for raw_attribute in use_syslog verbose debug \
    sql.pool_timeout sql.max_pool_overflow sql.min_pool_size \
    api.service_port \
    ssl.insecure ssl.cert_required ssl.generate_certs; do
    value=$(json_read "$OLDJSONFILE" attributes.quantum.${raw_attribute})
    $json_edit "$JSONFILE" -a attributes.neutron.${raw_attribute} --raw -v "$value"
  done

  for attribute in database_instance rabbitmq_instance keystone_instance \
    service_user service_password \
    networking_plugin networking_mode dhcp_domain \
    api.protocol api.service_host \
    ssl.keyfile ssl.certfile ssl.ca_certs; do
    value=$(json_read "$OLDJSONFILE" attributes.quantum.${attribute})
    $json_edit "$JSONFILE" -a attributes.neutron.${attribute} -v "$value"
  done

  if test -f "${UPGRADE_DATA_DIR}/quantum/db.stamp"; then
    # only keep database info if we stamped the database for migration
    # https://wiki.openstack.org/wiki/ReleaseNotes/Havana#Known_Issues_5
    for attribute in db.user db.database; do
      value=$(json_read "$OLDJSONFILE" attributes.quantum.${attribute})
      $json_edit "$JSONFILE" -a attributes.neutron.${attribute} -v "$value"
    done
  fi

  value=$(json_read "$OLDJSONFILE" deployment.quantum.elements.quantum-server)
  $json_edit "$JSONFILE" -a deployment.neutron.elements.neutron-server --raw -v "[ \"$value\" ]"

  crowbar neutron proposal edit default --file "$JSONFILE"

  rm -f "$JSONFILE"
else
  echo "No quantum proposal to migrate."
fi


### Done
touch "${UPGRADE_DATA_DIR}/post.run"
