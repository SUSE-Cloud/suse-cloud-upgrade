#!/bin/bash
# vim: sw=2 et
#
# Copyright 2014, SUSE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

UPGRADE_DATA_DIR=/var/lib/crowbar/upgrade/suse-cloud-4-to-5


### Output / log handling

use_log() {
  test -n "$SUSE_LOGFILE"
}

if use_log; then
  mkdir -p "`dirname "$SUSE_LOGFILE"`"

  ### based on install-chef-suse.sh

  # Copy stdout to fd 3
  exec 3>&1
  # Create fd 4 for logfile
  exec 4>> "$SUSE_LOGFILE"

  if [ -z "$SUSE_VERBOSE" ]; then
    # Set fd 1 and 2 to logfile
    exec 1>&4 2>&1
  else
    # Set fd 1 and 2 to logfile (and keep stdout too)
    exec 1> >( tee -a /dev/fd/4 ) 2>&1
  fi
  # Send summary fd to original stdout
  exec 6>&3

  echo_log () {
    echo -e === "$(date '+%F %T %z'): $@" >&4
  }

  echo_summary () {
    # Also send summary to logfile
    echo_log $@

    if [ -z "$SUSE_VERBOSE" ]; then
      echo -e $@ >&3
    else
      echo -e === $@ >&3
    fi
  }

  echo_if_log () {
    echo $@
  }

  die() {
    # Send empty line & error to logfile
    echo >&4
    echo_log "Error: $@"

    echo >&3
    echo -e "Error: $@" >&3

    exit 1
  }
else
  echo_summary () {
    if [ -z "$SUSE_VERBOSE" ]; then
      echo -e $@
    else
      echo -e === $@
    fi
  }

  echo_if_log () {
    true
  }

  die() {
    echo >&2
    echo -e "Error: $@" >&2

    exit 1
  }
fi


### Helpers

ensure_data_dir() {
  mkdir -p "${UPGRADE_DATA_DIR}"
}

check_crowbar_key_or_fail() {
  if test -z "$CROWBAR_KEY"; then
    die "CROWBAR_KEY environment variable is not set! Has SUSE Cloud been installed?"
  fi
}

get_installed_suse_cloud_version() {
  if test ! -f /etc/products.d/suse-cloud.prod; then
    return ""
  fi

  xpath /etc/products.d/suse-cloud.prod "//product/version/text()" 2> /dev/null
}

ask_yes_no_default_no() {
  if use_log; then
    echo -e "$1 [y/N] " >&4
    echo -en "$1 [y/N] " >&3
  else
    echo -en "$1 [y/N] "
  fi
  read ANSWER
  test "x$ANSWER" == "xy" -o "x$ANSWER" == "xY"
}

json_edit=/opt/dell/bin/json-edit
parse_node_data=/opt/dell/barclamps/provisioner/updates/parse_node_data
json_read () {
    local file="$1"
    local attr="$2"
    if [ "$file" = '-' ]; then
        $parse_node_data -a "$attr"
    elif [ -f "$file" ]; then
        $parse_node_data "$file" -a "$attr"
    fi | sed "s/^[^=]*=//g"
}

get_repo_url_from() {
  local repo="$1"
  local file="$2"
  local attr_repo="${repo//./\\.}"

  json_read "$file" attributes.provisioner.suse.autoyast.repos.${attr_repo}.url
}

get_allocated_nodes() {
  # Note: We can't simple echo the result and capture stdout, because of the
  # logging. Therefore, the return value of this function lives in the
  # $get_allocated_nodes_retval variable.
  #
  # $1 allows to filter for special roles

  local role=$1
  if test -z "$role"; then
    echo_if_log "Finding allocated nodes..."
  else
    echo_if_log "Finding allocated nodes with role ${role}..."
  fi

  local allocated_nodes=
  local admin_fqdn=$(hostname -f)

  for node in $(crowbar machines list); do
    local node_data=$(crowbar machines show "$node" | /opt/dell/barclamps/provisioner/updates/parse_node_data -a crowbar.allocated -a fqdn -a target_platform --)

    local node_allocated=$(echo "$node_data" | grep ^crowbar.allocated= | cut -d = -f 2-)
    local node_fqdn=$(echo "$node_data" | grep ^fqdn= | cut -d = -f 2-)
    local node_target_platform=$(echo "$node_data" | grep ^target_platform= | cut -d = -f 2-)

    # ignore non-allocated node
    if test "x$node_allocated" == "xfalse"; then
      echo_if_log "Skipping $node: not allocated"
      continue
    fi

    # ignore hyper-v nodes: we can't interact with them and they'll have to be
    # reinstalled
    if [[ "x$node_target_platform" == xwindows-* || "x$node_target_platform" == xhyperv-* ]]; then
      echo_if_log "Skipping $node: running Windows/Hyper-V"
      continue
    fi

    if test "x$node_fqdn" == "x$admin_fqdn"; then
      echo_if_log "Skipping $node: admin node"
      continue
    fi

    allocated_nodes="$allocated_nodes $node"
  done

  # Filter nodes for specific roles
  if test -n "$role"; then
    local nodes_with_role=$(knife search node "roles:$role" -a name | grep ^name: | cut -d : -f 2)

    # We cannot change allocated_nodes yet, as we need it for string comparison
    local found_nodes=
    for node in $nodes_with_role; do
      if [[ $allocated_nodes == *$node* ]]; then
        found_nodes="$found_nodes $node"
      fi
    done
    allocated_nodes=$found_nodes
  fi

  get_allocated_nodes_retval=$allocated_nodes
}

# each pacemaker cluster should have one founder node
get_cluster_founders() {

  local founders=$(knife search node "pacemaker_founder:true AND pacemaker_config_environment:*" -a name | grep ^name: | cut -d : -f 2)
  get_cluster_founders_retval=$founders
}
