#!/bin/bash
# vim: sw=2 et
#
# Copyright 2014, SUSE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e

SUSE_LOGFILE="/var/log/crowbar/upgrade/`basename $0`.log"
source "`dirname $0`/common"


if test -f "${UPGRADE_DATA_DIR}/pre.run"; then
  die "This script has already been run."
fi


ensure_data_dir
check_crowbar_key_or_fail
suse_cloud_version=$(get_installed_suse_cloud_version)

if test "x$suse_cloud_version" != "x4"; then
  die "Current installed version of SUSE Cloud is not 4: $suse_cloud_version"
fi

echo_summary "Performing sanity checks..."


### Check that we can talk to crowbar
out=$(crowbar crowbar list)
if test "x$out" != "xdefault"; then
  die "Unexpected results when checking for communication with Crowbar server."
fi


### Check that all nodes are powered on
get_allocated_nodes
allocated_nodes=$get_allocated_nodes_retval

for node in $allocated_nodes; do
  if ! ssh "$node" true 2> /dev/null; then
    die "Cannot reach $node; all allocated nodes must be powered on!"
  fi
done


### Check that /etc/crowbar/provisioner.json contains updated info about repositories
mkdir -p "${UPGRADE_DATA_DIR}/provisioner"
OLD_PROVISIONER_JSON="${UPGRADE_DATA_DIR}/provisioner/default-4.json"
ETC_PROVISIONER_JSON="/etc/crowbar/provisioner.json"
crowbar provisioner proposal show default > "$OLD_PROVISIONER_JSON"

# Check that /etc/crowbar/provisioner.json contains the minimum bits we need...
all_repos=
missing_repos=
for repo in SLE-Cloud SLE-Cloud-PTF SLES11-SP-{Pool,Updates} SLE11-HAE-SP3-{Pool,Updates} SUSE-Cloud-4-{Pool,Updates}; do
  if test -n "`get_repo_url_from "$repo" "$OLD_PROVISIONER_JSON"`"; then
    all_repos="$all_repos $repo"
    if test ! -f "$ETC_PROVISIONER_JSON"; then
      missing_repos="$missing_repos $repo"
    elif test -z "`get_repo_url_from "${repo//Cloud-4/Cloud-5}" "$ETC_PROVISIONER_JSON"`"; then
      missing_repos="$missing_repos $repo"
    fi
  fi
done

if test -n "$missing_repos"; then
  if test ! -f "$ETC_PROVISIONER_JSON"; then
    die "\nThe current provisioner configuration uses the following repositories:\n  ${all_repos}\nFor the upgrade process, please create a $ETC_PROVISIONER_JSON file with the following repositories:\n  ${all_repos//Cloud-4/Cloud-5}"
  else
    die "\nThe current provisioner configuration uses the following repositories:\n  ${all_repos}\nFor the upgrade process, please update $ETC_PROVISIONER_JSON so that it contains the following repositories:\n  ${all_repos//Cloud-4/Cloud-5}\n(Following repositories are missing:${missing_repos//Cloud-4/Cloud-5})"
  fi
fi

# ... and check that /etc/crowbar/provisioner.json doesn't contain more than
# what we need (adding Cloud 5 repo is fine, but adding other repos: we're not
# sure if it's an error or not)
if test -f "$ETC_PROVISIONER_JSON"; then
  all_repos=
  missing_repos=
  for repo in SLE-Cloud SLE-Cloud-PTF SLES11-SP3-{Pool,Updates} SLE11-HAE-SP3-{Pool,Updates}; do
    if test -n "`get_repo_url_from "$repo" "$ETC_PROVISIONER_JSON"`"; then
      all_repos="$all_repos $repo"
      if test -z "`get_repo_url_from "${repo}" "$OLD_PROVISIONER_JSON"`"; then
        missing_repos="$missing_repos $repo"
      fi
    fi
  done

  if test -n "$missing_repos"; then
    msg="\n$ETC_PROVISIONER_JSON contains the following repositories:\n  ${all_repos}\nHowever, the current provisioner configuration does not contain these repositories:\n  ${missing_repos}\n\nIf you continue with the upgrade process, the missing repositories will automatically be added to the provisioner configuration.\nIf needed, you can stop the upgrade process now and update $ETC_PROVISIONER_JSON to remove repositories.\n\nDo you want to continue?"
    if ! ask_yes_no_default_no "$msg"; then
      exit 0
    fi
  fi
fi


### Check if pacemaker barclamp is present (i.e. system is updated)
if ! rpm -q crowbar-barclamp-pacemaker 2> /dev/null; then
  die "Pacemaker barclamp not found. Are all updates installed?"
fi


### Deactivate all proposals
echo_summary "Deactivating OpenStack barclamp proposals..."

deactivation_list="trove tempest heat ceilometer nova_dashboard nova neutron cinder glance ceph swift keystone rabbitmq database pacemaker"

for barclamp in $deactivation_list; do
  applied_proposals=$(crowbar "$barclamp" list)
  if test "$applied_proposals" == "No current configurations"; then
    continue
  fi

  for proposal in $applied_proposals; do
    echo "Deactivating proposal $proposal of barclamp ${barclamp}..."
    crowbar "$barclamp" delete "$proposal"
  done
done

# Double-check there's nothing left; we do another loop to avoid a race where
# the proposal is still listed, just after we deleted it
sleep 10

for barclamp in $deactivation_list; do
  applied_proposals=$(crowbar "$barclamp" list)
  if test "$applied_proposals" != "No current configurations"; then
    die "Was not able to deactivate all proposals for $barclamp."
  fi
done


### Stop openstack services
echo_summary "Stopping OpenStack services..."

for node in $allocated_nodes; do
  echo "Disabling OpenStack services on ${node}..."
  ssh "$node" 'rcchef-client stop; for i in /etc/init.d/openstack-* /etc/init.d/openvswitch-switch ; do if test -e $i ; then initscript=`basename $i`; chkconfig -d $initscript; $i stop; fi; done'
done

# Make sure all openstack services are down on all nodes before we stop rabbitmq
sleep 10

# Note: be careful that this is not run on the admin node, where we need rabbitmq!
for node in $allocated_nodes; do
  ssh "$node" 'if test -f /etc/init.d/rabbitmq-server; then chkconfig -d rabbitmq-server; /etc/init.d/rabbitmq-server stop; fi'
done


### Update the repos on each node
echo_summary "Disabling SUSE Cloud 4 repositories..."
for node in $allocated_nodes; do
  echo "Updating repositories on ${node}..."
  ssh "$node" 'zypper mr -d SUSE-Cloud-4-Pool SUSE-Cloud-4-Updates'
done


### Disable crowbar and chef-client while packages get upgraded
echo_summary "Stopping Crowbar..."
rcchef-client stop
rccrowbar stop
rm /opt/dell/crowbar_framework/.crowbar-installed-ok


### Done
touch "${UPGRADE_DATA_DIR}/pre.run"
